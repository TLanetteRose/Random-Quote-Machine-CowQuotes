{"version":3,"sources":["component/RebelCowV1.jpg","component/QuoteImage.js","component/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QuoteImage","src","require","QuoteMachine","assignNewQuoteIndex","selectedQuote","id","className","bg","fixed","sm","lg","quote","author","variant","size","onClick","target","href","encodeURI","icon","faTwitter","App","props","state","quotes","selectedQuoteIndex","bind","generateNewQuoteIndex","fetch","then","data","json","setState","this","length","random","console","log","Number","isInteger","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8KAAAA,EAAOC,QAAU,IAA0B,wC,yQCO5BC,EAJI,kBACf,kBAAC,IAAD,CAAKC,IAAKC,EAAQ,OCwEPC,EA/DM,SAAC,GAAD,IAAGC,EAAH,EAAGA,oBAAqBC,EAAxB,EAAwBA,cAAxB,OACnB,kBAAC,WAAD,KACE,4BAAQC,GAAG,SAASC,UAAU,aAC5B,kBAAC,IAAD,CAAQC,GAAG,OAAOC,MAAM,OACtB,kBAAC,IAAD,KACE,wBAAIH,GAAG,SAAP,qCAKN,kBAAC,IAAD,CAAWA,GAAG,aACZ,kBAAC,IAAD,CAAKC,UAAU,0CACb,kBAAC,IAAD,CAAKG,GAAI,GAAIC,GAAI,GACf,yBAAKL,GAAG,OAAOC,UAAU,OACtBF,EAAcO,MADjB,KAC0B,IACxB,0BAAMN,GAAG,UAAT,IAAoBD,EAAcQ,QAClC,yBACEP,GAAG,UACHC,UAAU,2CAEV,kBAAC,IAAD,CACED,GAAG,YACHQ,QAAQ,UACRC,KAAK,KACLC,QAASZ,GAJX,aAQA,kBAAC,IAAD,CACEE,GAAG,cACHW,OAAO,SACPC,KAAMC,UAAU,yCAAD,OAC4Bd,EAAcO,MAD1C,+BAIf,kBAAC,IAAD,CAAiBQ,KAAMC,IAAWN,KAAK,YAMjD,kBAAC,IAAD,CACET,GAAG,cACHC,UAAU,sEAEV,kBAAC,IAAD,CAAKG,GAAI,GAAIC,GAAI,EAAGJ,UAAU,iCAC5B,kBAAC,EAAD,CAAYA,UAAU,4BAK5B,4BACED,GAAG,SACHC,UAAU,oDACV,wBAAID,GAAG,YAAP,wBACwB,IACtB,uBAAGY,KAAK,4BAAR,iBCEOI,E,YA/Db,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAO,CACVC,OAAQ,GACRC,mBAAoB,MAEtB,EAAKtB,oBAAsB,EAAKA,oBAAoBuB,KAAzB,gBAC3B,EAAKC,sBAAwB,EAAKA,sBAAsBD,KAA3B,gBAPb,E,iFAaG,IAAD,OAClBE,MAAM,gJACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAL,GAAM,OAAI,EAAKQ,SAAS,CAAER,UAAU,EAAKrB,yB,8CAiBnD,GAAI8B,KAAKV,MAAMC,OAAOU,OAGtB,OAAOC,iBAAO,EAAGF,KAAKV,MAAMC,OAAOU,OAAS,K,4CAK5CD,KAAKD,SAAS,CAAEP,mBAAoBQ,KAAKN,4B,+BAKvC,OADAS,QAAQC,IAAIJ,KAAKV,MAAME,oBAErB,6BAGIQ,KAAK7B,cACL,kBAAC,EAAD,CAAcA,cAAgB6B,KAAK7B,cAAeD,oBAAsB8B,KAAK9B,sBAC7E,Q,oCAhCR,GAAK8B,KAAKV,MAAMC,OAAOU,QAAWI,OAAOC,UAAUN,KAAKV,MAAME,oBAG9D,OAAOQ,KAAKV,MAAMC,OAAOS,KAAKV,MAAME,wB,GAxBpBe,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.5cceca59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/RebelCowV1.a302dcc9.jpg\";","import React from 'react';\nimport Img from 'react-image';\n\nconst QuoteImage = () => (\n    <Img src={require('/Users/TLanPollard/Documents/GitHub/Random-Quote-Machine-CowQuotes/src/component/RebelCowV1.jpg')}/> \n)\n\nexport default QuoteImage;","import React, {Fragment} from 'react';\nimport  Navbar  from 'react-bootstrap/Navbar';\nimport  Container  from 'react-bootstrap/Container';\nimport  Row from 'react-bootstrap/Row';\nimport  Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n//import Image from 'react-bootstrap/Image';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport QuoteImage from './QuoteImage.js';\n\n\n\nconst QuoteMachine = ({ assignNewQuoteIndex, selectedQuote }) => (\n  <Fragment>\n    <header id=\"header\" className=\"mb-3 mt-0\">\n      <Navbar bg=\"dark\" fixed=\"top\">\n        <Container>\n          <h1 id=\"title\">Rebel-Cow Random Quote Machine</h1>\n        </Container>\n      </Navbar>\n    </header>\n\n    <Container id=\"quote-box\">\n      <Row className=\"justify-content-center mx-auto my-auto\">\n        <Col sm={11} lg={8}>\n          <div id=\"text\" className=\"p-3\">\n            {selectedQuote.quote} -{\" \"}\n            <span id=\"author\"> {selectedQuote.author}</span>\n            <div\n              id=\"buttons\"\n              className=\"p-4 d-flex justify-content-between mt-5\"\n            >\n              <Button\n                id=\"new-quote\"\n                variant=\"primary\"\n                size=\"lg\"\n                onClick={assignNewQuoteIndex}\n              >\n                New Quote\n              </Button>\n              <Button\n                id=\"tweet-quote\"\n                target=\"_blank\"\n                href={encodeURI(\n                  `https://twitter.com/intent/tweet?text=${selectedQuote.quote}&hashtags=rebel-cowquotes`\n                )}\n              >\n                <FontAwesomeIcon icon={faTwitter} size=\"1x\"></FontAwesomeIcon>\n              </Button>\n            </div>\n          </div>\n        </Col>\n      </Row>\n      <Row\n        id=\"quote-image\"\n        className=\"d-flex justify-content-center align-content-center mx-auto my-auto\"\n      >\n        <Col sm={11} lg={8} className=\"d-flex justify-content-center\">\n          <QuoteImage className=\"align-content-center\" />\n        </Col>\n      </Row>\n    </Container>\n    \n    <footer\n      id=\"footer\"\n      className=\"d-flex justify-content-center align-items-center\">\n      <h5 id=\"designer\">\n        T.Lanette Pollard for{\" \"}\n        <a href=\"http://www.rebel-cow.com\">Rebel-Cow</a>\n      </h5>\n    </footer>\n    \n  </Fragment>\n);\n\nexport default QuoteMachine;","import React, { Component } from 'react';\nimport { random } from 'lodash'\nimport './App.css';\nimport QuoteMachine from './component/QuoteMachine';\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state= {\n      quotes: [],\n      selectedQuoteIndex: null,\n    }\n    this.assignNewQuoteIndex = this.assignNewQuoteIndex.bind(this);\n    this.generateNewQuoteIndex = this.generateNewQuoteIndex.bind(this);\n    \n  }\n\n  //Using fetch to request JSON Gist with quotes\n\n  componentDidMount() {\n    fetch('https://gist.githubusercontent.com/TLanetteRose/cbb344a12b2586a070d1f3fa2fe02414/raw/bd6cdd24425bd0db124d05f6662dbe2a5e6fa0fc/cowquotes.json')\n      .then(data => data.json())\n      .then(quotes => this.setState({ quotes }, this.assignNewQuoteIndex));\n  }\n\nget selectedQuote() {\n  if (!this.state.quotes.length || !Number.isInteger(this.state.selectedQuoteIndex)) {\n    return undefined;\n  }\n  return this.state.quotes[this.state.selectedQuoteIndex];\n}\n\n\n//Use Lodash library for random function\n/**\n* Returns an integer representing an index in state.quotes\n* If state.quotes is empty, returns undefined\n*/\ngenerateNewQuoteIndex() {\n  if(!this.state.quotes.length){\n    return undefined;\n  }\n  return random(0, this.state.quotes.length - 1);\n}\n\n//Method sets state to randomly quote index \nassignNewQuoteIndex() {\n  this.setState({ selectedQuoteIndex: this.generateNewQuoteIndex() });\n}\n\n  render() {\n    console.log(this.state.selectedQuoteIndex);\n    return (\n      <div>\n\n        {\n          this.selectedQuote ?\n          <QuoteMachine selectedQuote= {this.selectedQuote} assignNewQuoteIndex= {this.assignNewQuoteIndex}/> :\n          null\n        }\n        \n\n      </div>\n    );\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}